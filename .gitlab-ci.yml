# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Settings
# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Check module environment
before_script:
  - ulimit -s unlimited
  - module list || true
  - python3 -V  || true
  - python2 -V  || true
  - unset CMAKE_GENERATOR
  - if [ -n "${DO_CORE_SPLIT}" ]; then
      echo " FLEXI_SPLIT_TYPE=OMPI_COMM_TYPE_CORE. Splitting shared memory domains on processor-level!";
      export FLEXI_SPLIT_TYPE=OMPI_COMM_TYPE_CORE;
    else
      if [ -n "${DO_NODE_SPLIT}" ]; then
        echo " FLEXI_SPLIT_TYPE=FLEXI_COMM_TYPE_NODE. Splitting shared memory domains on sub-node-level with 2 cores per node!";
        export FLEXI_SPLIT_TYPE=FLEXI_COMM_TYPE_NODE;
      else
        echo " Splitting shared memory domains on node-level! Set variable DO_CORE_SPLIT=T to force core-level OR DO_NODE_SPLIT=T to force sub-node-level shared memory splitting for all regression tests.";
      fi
    fi
  - if [ -n "${DO_NINJA}" ]; then
      echo " Setting CMAKE_GENERATOR=Ninja to use ninja generator";
      export CMAKE_GENERATOR=Ninja;
      export GENERATOR=ninja;
      export NCORES=0;
    else
      echo " Using default generator [Unix Makefiles] and [make] for compiling.";
      export CMAKE_GENERATOR=;
      export GENERATOR=make;
      export NCORES=;
    fi

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stages
# ----------------------------------------------------------------------------------------------------------------------------------------------------
stages:
  - build
  - reggie_checkin
  - reggie_nightly
  - reggie_weekly
  - particle_checkin
  - particle_nightly
  - particle_weekly
  - python
  - documentation
  - deploy

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Templates ("hidden jobs")
# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Default parameters for the build and testing stage
.default_build_param: &default_build_param
  tags: [flexitag]
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure

.default_python_param: &default_python_param
  tags: [dockertag]
  image: python:latest
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  cache:
    paths:
      - venv
      - .cache/pip
  before_script:
    - ulimit -s unlimited
    - module list || true
    - python3 --version
    # Setup Python pip
    - python3 -m pip install --upgrade pip --root-user-action=ignore
    - python3 -m pip --version
    # Setup Python virtual environment
    - rm -rf venv
    - python3 -m venv venv
    - source venv/bin/activate
    # Install coverage
    - pip install --no-cache-dir coverage --root-user-action=ignore

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Default parameters for the reggie stage
.default_param: &default_param
  <<: *default_build_param
  allow_failure: false

.default_python: &default_python
  <<: *default_python_param
  allow_failure: false

.reggie_cache: &reggie_cache
  key: "reggie"
  paths: [reggie]
  policy: pull

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Defaults for the standard tests (utilizing "extends" to merge the other "artifacts" options with the specific path)
.defaults: &defaults
  extends: .default_param
  needs: [build]
  artifacts:
    paths: [build]
  cache:
    - *reggie_cache
    - key: "${CI_COMMIT_REF_SLUG}"
      paths: [build]
      policy: pull
  variables:
    FF_ENABLE_JOB_CLEANUP: 1

.defaults_python: &defaults_python
  extends: .default_python
  variables:
    FF_ENABLE_JOB_CLEANUP: 1

.defaults_nightly: &defaults_nightly
  <<: *defaults
  rules:
    - if: '$DO_NIGHTLY'

.defaults_weekly: &defaults_weekly
  <<: *defaults
  rules:
    - if: '$DO_WEEKLY'

.defaults_nightly_python: &defaults_weekly_python
  <<: *defaults_python
  rules:
    - if: '$DO_NIGHTLY'

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "build": Build on check-in
# ----------------------------------------------------------------------------------------------------------------------------------------------------
reggie_download:
  extends: .default_build_param
  artifacts:
    paths: [reggie]
  cache:
    key: "reggie"
    paths: [reggie]
    policy: push
  stage: build
  script:
    - git clone https://github.com/piclas-framework/reggie2.0.git reggie
    - if [ -f "reggie/.git/refs/heads/master" ]; then cat reggie/.git/refs/heads/master ; fi

build:
  extends: .default_build_param
  needs: [reggie_download]
  artifacts:
    paths: [build]
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    paths: [build]
    policy: push
  stage: build
  script:
    - mkdir -p build
    - cd build
    - cmake .. -DLIBS_BUILD_HDF5=OFF
    - $GENERATOR -j $NCORES

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_checkin": Run most simple reggie with previous builds on check-in
# ----------------------------------------------------------------------------------------------------------------------------------------------------
run_basic:
  <<: *defaults
  stage: reggie_checkin
  script:
    - cd build
    - python ../reggie/reggie.py ../regressioncheck/checks/run_basic/freestream_3D -j 6 -e ./bin/flexi

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "particle_checkin": Run basic particle regression checks
# ----------------------------------------------------------------------------------------------------------------------------------------------------
FV_particle:
    <<: *defaults
    stage: particle_checkin
    script:
        - cd build
        - python ../reggie/reggie.py ../regressioncheck/checks/particle/FV -j 6

CHE_particle:
    <<: *defaults
    stage: particle_checkin
    script:
        - cd build
        - python ../reggie/reggie.py ../regressioncheck/checks/particle/CHE -j 6

CN_particle:
    <<: *defaults
    stage: particle_checkin
    script:
        - cd build
        - python ../reggie/reggie.py ../regressioncheck/checks/particle/CN -j 6

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_nightly": Build and run
#                         - build all specified compile options in "run_basic" with LIBS_BUILD_HDF5=ON
#                         - h-p-convtests
#                         - parabolic testcases
#                         - riemann solver tests
# ----------------------------------------------------------------------------------------------------------------------------------------------------
build_all:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build
    - python ../reggie/reggie.py ../regressioncheck/checks/run_basic -j 6

timediscs:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build
    - python ../reggie/reggie.py ../regressioncheck/checks/timedisc -j 6

convtest:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build
    - python ../reggie/reggie.py ../regressioncheck/checks/convtest -j 6

parabolic:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build
    - python ../reggie/reggie.py ../regressioncheck/checks/parabolic -j 6

riemann:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build
    - python ../reggie/reggie.py ../regressioncheck/checks/riemann -j 6

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "particle_nightly": Build and run
#                         - particle mortar tests
#                         - particle sanitize tests
# ----------------------------------------------------------------------------------------------------------------------------------------------------
PROC_particle:
  <<: *defaults_nightly
  stage: particle_checkin
  variables:
    DO_CORE_SPLIT: "1"
  script:
    - cd build
    - python ../reggie/reggie.py ../regressioncheck/checks/particle/PROC -j 6

SANI_particle:
  <<: *defaults_nightly
  stage: particle_nightly
  allow_failure: true
  script:
    - cd build
    - python ../reggie/reggie.py ../regressioncheck/checks/particle/SANI -j 6

NIG_particle:
  <<: *defaults_nightly
  stage: particle_nightly
  allow_failure: true
  script:
    - cd build
    - python ../reggie/reggie.py ../regressioncheck/checks/particle/NIG -j 6

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_weekly": Build and run more complex tests, basically complete simulatons
#                         - Taylor-Green vortex
#                         - NACA profile
#                         - Advanced FV simulations
#                         - RANS channel
# ----------------------------------------------------------------------------------------------------------------------------------------------------
tgv:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build
    - python ../reggie/reggie.py ../regressioncheck/checks/tgv -j 6

naca:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build
    - python ../reggie/reggie.py ../regressioncheck/checks/naca -j 6

fv_switch:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build
    - python ../reggie/reggie.py ../regressioncheck/checks/fv_switch -j 6

fv_blend:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build
    - python ../reggie/reggie.py ../regressioncheck/checks/fv_blend -j 6

channelRANS:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build
    - python ../reggie/reggie.py ../regressioncheck/checks/channelRANS -j 6

imperator:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build
    - python ../reggie/reggie.py ../regressioncheck/checks/preconditioner -j 6

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "particle_weekly": Build and run more complex tests, basically complete simulatons
# ----------------------------------------------------------------------------------------------------------------------------------------------------
WEK_particle:
  <<: *defaults_weekly
  stage: particle_weekly
  allow_failure: true
  script:
    - cd build
    - python ../reggie/reggie.py ../regressioncheck/checks/particle/WEK -j 6

# Stage "python": Build and check the python scripts
# ----------------------------------------------------------------------------------------------------------------------------------------------------
ruff:
  extends: .defaults_nightly_python
  stage: python
  script:
    - python3 -m pip install ruff
    - ruff --version
    - ruff check --extend-ignore=E201,E202,E203,E221,E222,E225,E231,E271,E272 --line-length=132 --preview tools

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "documentation": Creates doxygen documentation & compiles the documentation creating the *.pdf
# ----------------------------------------------------------------------------------------------------------------------------------------------------
documentation:
  extends: .default_build_param
  stage: documentation
  rules:
    - if: '$DO_DEPLOY'
    - if: '$DO_WEEKLY'
  script:
    - cd doc/doxygen
    - ./builddoxy.sh
  artifacts:
    paths:
      - src
      - doc/doxygen
  cache:
    key: "${CI_COMMIT_REF_SLUG}-DOC"
    paths: [doc/doxygen]
    policy: push

userguide:
  extends: .default_build_param
  stage: documentation
  rules:
    - if: '$DO_DEPLOY'
    - if: '$DO_WEEKLY'
  script:
    - cd doc/userguide
    - make
  artifacts:
    paths:
      - doc/userguide
  cache:
    key: "${CI_COMMIT_REF_SLUG}-USERGUIDE"
    paths: [doc/userguide]
    policy: push

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "deploy": Copies the doxygen documentation and userguide *.pdf to the homepage server & copies the repository to github
# ----------------------------------------------------------------------------------------------------------------------------------------------------
homepage:
  extends: .default_build_param
  stage: deploy
  rules:
    - if: '$DO_DEPLOY && $CI_SERVER_URL =~ /.*\.iag\.uni-stuttgart\.de$/'
  cache:
    - key: "${CI_COMMIT_REF_SLUG}-USERGUIDE"
      paths: [doc/userguide]
      policy: pull
  variables:
    FF_ENABLE_JOB_CLEANUP: 1
  script:
    - rsync --recursive --delete doc/userguide/userguide.pdf webserver:nrg.git/nrg_website/NRG/userguide/userguide.pdf

github:
  extends: .default_build_param
  stage: deploy
  rules:
    - if: '$DO_DEPLOY && $CI_SERVER_URL =~ /.*\.iag\.uni-stuttgart\.de$/'
  variables:
    FF_ENABLE_JOB_CLEANUP: 1
  script:
    - git clone --single-branch git@gitlab.iag.uni-stuttgart.de:flexi/flexi.git flexi_github
    - cd flexi_github
    - git push --mirror git@github.com:flexi-framework/flexi.git
