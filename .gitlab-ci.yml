stages:
  - build
  - reggie_checkin
  - reggie_particle
  - reggie_nightly
  - reggie_weekly
  - deploy

.template: &defaults_gnu
  tags:
    - flexitag
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build_gnu
  cache:
    key: "${CI_COMMIT_REF_SLUG}-GNU"
    paths:
      - build_gnu
    policy: pull
  allow_failure: false

.template: &defaults_nightly
  tags:
    - flexitag
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build_gnu
  cache:
    key: "${CI_COMMIT_REF_SLUG}-GNU"
    paths:
      - build_gnu
    policy: pull
  allow_failure: true
  rules:
    - if: '$DO_NIGHTLY'

.template: &defaults_weekly
  tags:
    - flexitag
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build_gnu
  cache:
    key: "${CI_COMMIT_REF_SLUG}-GNU"
    paths:
      - build_gnu
    policy: pull
  allow_failure: true
  rules:
    - if: '$DO_WEEKLY'

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "build": Build with intel/gnu on check-in
# ----------------------------------------------------------------------------------------------------------------------------------------------------
build_gnu:
  tags:
    - flexitag
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build_gnu
  cache:
    key: "${CI_COMMIT_REF_SLUG}-GNU"
    paths:
      - build_gnu
    policy: push
  stage: build
  script:
    - mkdir -p build_gnu ; cd build_gnu
    - git clone git@gitlab.com:reggie2.0/reggie2.0.git
    - cmake .. -DLIBS_BUILD_HDF5=OFF ; make -j 6

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_checkin":
# - Run most simple reggie with previous builds on check-in
# - Build with sanitize options and check for missing initialization, memory leaks and use-after free
# ----------------------------------------------------------------------------------------------------------------------------------------------------
gnu:
  <<: *defaults_gnu
  stage: reggie_checkin
  script:
    - cd build_gnu
    - python ./reggie2.0/reggie.py ../regressioncheck/checks/run_basic/freestream_3D -j 6 -e ./bin/flexi

# gnu_sanitize:
#   <<: *defaults_gnu
#   stage: reggie_checkin
#   script:
#     - cd build_gnu
#     - python ./reggie2.0/reggie.py ../regressioncheck/checks/run_sanitize -j 6

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_particle": Run basic particle regression checks
# ----------------------------------------------------------------------------------------------------------------------------------------------------
CHE_particle:
    <<: *defaults_gnu
    stage: reggie_particle
    script:
        - cd build_gnu
        - python ./reggie2.0/reggie.py ../regressioncheck/checks/particle/CHE -j 6

CN_particle:
    <<: *defaults_gnu
    stage: reggie_particle
    script:
        - cd build_gnu
        - python ./reggie2.0/reggie.py ../regressioncheck/checks/particle/CN -j 6

FV_particle:
    <<: *defaults_gnu
    stage: reggie_particle
    script:
        - cd build_gnu
        - python ./reggie2.0/reggie.py ../regressioncheck/checks/particle/FV -j 6

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_nightly": Build and run
#                         - build all specified compile options in "run_basic" with LIBS_BUILD_HDF5=ON
#                         - h-p-convtests
#                         - parabolic testcases
#                         - riemann solver tests
#                         - particle mortar tests
# ----------------------------------------------------------------------------------------------------------------------------------------------------
gnu_build_all:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then  cd build_gnu ;  python ./reggie2.0/reggie.py ../regressioncheck/checks/run_basic -j 6; fi

gnu_timediscs:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then  cd build_gnu ;  python ./reggie2.0/reggie.py ../regressioncheck/checks/timedisc -j 6; fi

gnu_convtest:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ;  python ./reggie2.0/reggie.py ../regressioncheck/checks/convtest -j 6; fi

gnu_parabolic:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ;  python ./reggie2.0/reggie.py ../regressioncheck/checks/parabolic -j 6; fi

gnu_riemann:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ;  python ./reggie2.0/reggie.py ../regressioncheck/checks/riemann -j 6; fi

NIG_particle:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ;  python ./reggie2.0/reggie.py ../regressioncheck/checks/particle/NIG -j 6; fi

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_weekly": Build and run more complex tests, basically complete simulatons
# ----------------------------------------------------------------------------------------------------------------------------------------------------
gnu_tgv:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - if [ -n "${DO_WEEKLY}" ]; then  cd build_gnu ;  python ./reggie2.0/reggie.py ../regressioncheck/checks/tgv -j 6; fi

gnu_naca:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - if [ -n "${DO_WEEKLY}" ]; then  cd build_gnu ;  python ./reggie2.0/reggie.py ../regressioncheck/checks/naca -j 6; fi

gnu_fv:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - if [ -n "${DO_WEEKLY}" ]; then cd build_gnu ;  python ./reggie2.0/reggie.py ../regressioncheck/checks/fv -j 6; fi

gnu_channelRANS:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - if [ -n "${DO_WEEKLY}" ]; then cd build_gnu ;  python ./reggie2.0/reggie.py ../regressioncheck/checks/channelRANS -j 6 ; fi

WEK_particle:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - if [ -n "${DO_WEEKLY}" ]; then cd build_gnu ;  python ./reggie2.0/reggie.py ../regressioncheck/checks/particle/WEK -j 6; fi

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "deploy": 1. Creates doxygen documentation & compiles the documentation creating the *.pdf
#                 2. Copies the doxygen documentation and userguide *.pdf to the homepage server & copies the repository to github
# ----------------------------------------------------------------------------------------------------------------------------------------------------
documentation:
  stage: deploy
  tags:
    - flexitag
  script:
    - cd doc/doxygen ; ./builddoxy.sh
    - if [ -n "${DO_DEPLOY}" ]; then ssh flexi@euler rm -rf homepage/doxygen ; scp -r doxygen flexi@euler:~/homepage/. ; fi
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - src
      - doc/doxygen

userguide:
  stage: deploy
  tags:
    - flexitag
  script:
    - cd doc/userguide ; make; cd ..
    - if [ -n "${DO_DEPLOY}" ]; then scp -r userguide flexi@euler:~/homepage/. ; fi
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - doc/userguide

github:
  stage: deploy
  tags:
    - flexitag
  rules:
    - if: '$DO_DEPLOY'
  script:
    - if [ -z "${DO_DEPLOY}" ]; then exit ; fi
    - git clone --single-branch git@gitlab.iag.uni-stuttgart.de:flexi/flexi.git flexi_github ; cd flexi_github ; git push --mirror git@github.com:flexi-framework/flexi.git ; cd ../
